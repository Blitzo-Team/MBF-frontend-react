{"version":3,"sources":["module/login/index.js","App.js","serviceWorker.js","shared/redux/reducer.js","shared/redux/store.js","index.js"],"names":["App","console","log","react_default","a","createElement","Component","Header","Layout","Footer","Content","className","layout","react_router_dom","react_router","path","component","Index","Boolean","window","location","hostname","match","appReducer","combineReducers","rootReducer","state","action","migrations","1","Object","objectSpread","persistConfig","key","version","storage","migrate","createMigrate","debug","whitelist","persistedReducer","persistReducer","store","createStore","applyMiddleware","thunk","redux_store","persistor","persistStore","redux","ReactDOM","render","react_redux_es","integration_react","loading","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8LASeA,mLAJX,OADAC,QAAQC,IAAI,SACLC,EAAAC,EAAAC,cAAA,kCAHOC,sBCGVC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,OAAQC,EAAYF,IAAZE,QA8BTV,mLAxBX,OACEG,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACfR,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAACE,EAAD,eAIAJ,EAAAC,EAAAC,cAACK,EAAD,KACEP,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWC,OAKjCd,EAAAC,EAAAC,cAACI,EAAD,wBAnBUH,aCKEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+GCfAC,EAAaC,YAAgB,IAQpBC,EAJK,SAACC,EAAOC,GAC1B,OAAOJ,EAAWG,EAAOC,ICFrBC,EAAa,CACjBC,EAAG,SAAAH,GACD,OAAOI,OAAAC,EAAA,EAAAD,CAAA,GACFJ,KAKHM,EAAgB,CACpBC,IAAK,OACLC,QAAS,EACTC,YACAC,QAASC,YAAcT,EAAY,CAAEU,OAAO,IAC5CC,UAAW,CAAC,SAGRC,EAAmBC,YAAeT,EAAeP,GACjDiB,EAAQC,YAAYH,EAAkBI,YAAgBC,MAG7CC,EAAA,CACbJ,QACAK,UAJgBC,YAAaN,oBCfvBK,UAAqBE,EAArBF,WAAWL,EAAUO,EAAVP,MAEnBQ,IAASC,OACPhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAUV,MAAOA,GACfvC,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAaC,QAAS,KAAMP,UAAWA,GACrC5C,EAAAC,EAAAC,cAACkD,EAAD,QAIJC,SAASC,eAAe,SH+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1c70c503.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    console.log(\"hello\");\r\n    return <div>Hello login!</div>;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\r\nimport Index from \"./module/login/index\";\r\nimport { Layout } from 'antd';\r\n\r\nconst { Header, Footer, Content } = Layout;\r\n\r\nclass App extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <Layout>\r\n        <Header>\r\n          Header\r\n        </Header>\r\n\r\n        <Content>\r\n          <HashRouter>\r\n            <Switch>\r\n              <Route path=\"/\" component={Index} />\r\n            </Switch>\r\n          </HashRouter>\r\n        </Content>\r\n\r\n        <Footer>Footer</Footer>\r\n      </Layout>\r\n\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\n\r\n\r\nconst appReducer = combineReducers({\r\n  // login: \r\n});\r\n\r\nconst rootReducer = (state, action) => {\r\n  return appReducer(state, action);\r\n};\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { persistStore, persistReducer, createMigrate } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport rootReducer from \"./reducer\";\r\n\r\nconst migrations = {\r\n  1: state => {\r\n    return {\r\n      ...state\r\n    };\r\n  }\r\n};\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  version: 1,\r\n  storage,\r\n  migrate: createMigrate(migrations, { debug: false }),\r\n  whitelist: [\"user\"]\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\nconst store = createStore(persistedReducer, applyMiddleware(thunk));\r\nconst persistor = persistStore(store);\r\n\r\nexport default {\r\n  store,\r\n  persistor\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport redux from \"./shared/redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst { persistor, store } = redux;\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <App />\r\n    </PersistGate>\r\n  </Provider>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}